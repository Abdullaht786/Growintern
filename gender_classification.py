# -*- coding: utf-8 -*-
"""Gender Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/gender-classification-634e3e61-50f5-4450-9e68-c8c8f2cd65f6.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241015/auto/storage/goog4_request%26X-Goog-Date%3D20241015T070209Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D76b947f95d6a431a216ada3ea54e1b4734d0fad591676712c04aa0bcbf5567603d03adfdba9aa76cab4c0b2db5bd8e73f849659c7a89520f57f20335ce592e81c6230767abddbfb47f922325a47aaaf08fc6713f9a887662c0fbee4696aea160dabac68c97eefd367af13d6234da5acfae7dc3a1279cf138e939178c06c3757f909653da907c0c3d9593081c1f90256ab585e34202c50bf30a40706d35be4119d2ace5fb00b0f2591ecf5583de5cc469e744b221c58a5ca7a77c72396111038042ef792e78d7acbff1f7247d9957cdf294a77dfa2c5083d686f97924279192ad466029a26683ae813c58de91251b0c6322cd56b322758b9c271013dd41380105
"""

import tensorflow as tf
from tensorflow.keras import regularizers, initializers, Sequential
from tensorflow.keras.layers import Conv2D, Dropout, MaxPooling2D, Flatten, Dense

import matplotlib.pyplot as plt
import numpy as np

train_dir = "/kaggle/input/gender-detection-and-classification-image-dataset/test"
test_dir = "/kaggle/input/gender-detection-and-classification-image-dataset/test"

batch_size = 32
img_size = 224

train_ds = tf.keras.utils.image_dataset_from_directory(train_dir,
                                                      batch_size=batch_size,
                                                      image_size=(img_size, img_size))

test_ds = tf.keras.utils.image_dataset_from_directory(test_dir,
                                                     batch_size=batch_size,
                                                     image_size=(img_size, img_size))

class_names = ['man', 'woman']
class_names

train_ds = train_ds.prefetch(tf.data.AUTOTUNE)
test_ds = test_ds.prefetch(tf.data.AUTOTUNE)

for image, label in train_ds.take(1):
    plt.figure(figsize=(12, 10))
    for i in range(16):
        plt.subplot(4, 4, i+1)
        plt.imshow(image[i].numpy().astype("uint8"))
        plt.title(class_names[label[i]])
        plt.axis("off")

"""## Data Augmentation"""

data_augmentation = Sequential([
    tf.keras.layers.Resizing(180, 180),
    tf.keras.layers.RandomFlip("horizontal_and_vertical")
])

"""## Visualize Augmented Images"""

for image, label in train_ds.take(1):
    plt.figure(figsize=(12, 10))
    for i in range(16):
        plt.subplot(4, 4, i+1)
        augmented_image = data_augmentation(image)
        plt.imshow(augmented_image[i].numpy().astype("uint8"))
        plt.title(class_names[label[i]])
        plt.axis("off")

"""## Model Creation"""

regularizer = regularizers.l1(0.001)
initializer = initializers.HeNormal(seed=20)

model = Sequential([
    data_augmentation,
    Conv2D(64, 3, activation="relu", kernel_initializer=initializer, kernel_regularizer=regularizer),
    MaxPooling2D((2, 2)),
    Conv2D(32, 3, activation="relu", kernel_initializer=initializer, kernel_regularizer=regularizer),
    MaxPooling2D((2, 2)),
    Dropout(0.2),
    Flatten(),
    Dense(10, activation="softmax")
])

model.compile(optimizer='adam',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])

history = model.fit(train_ds, epochs=20)

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['loss'], label='loss')
plt.legend()

from sklearn.metrics import f1_score

"""## Test on test dataset"""

for image, label in test_ds.take(1):
    plt.figure(figsize=(16, 18))
    for i in range(16):
        plt.subplot(8, 2, i+1)
        plt.imshow(image[i].numpy().astype("uint8"))
        pred = model.predict(tf.expand_dims(image[i], axis=0))
        prediction = np.argmax(pred, axis=1)
        print(prediction)
        plt.title(f"Original Label: {class_names[label[i]]} -- Predicted label: {class_names[int(prediction)]}")
        plt.axis("off")

model.evaluate(test_ds)

"""## Save model"""

model.save("Gender_classification.keras")

